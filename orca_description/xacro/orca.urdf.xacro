<?xml version="1.0"?>

<robot name="orca" xmlns:xacro="http://ros.org/wiki/xacro">

  <!-- Simulation modes:
       SIM_MODE:=hw6           Hardware build 6
       SIM_MODE:=slam_test     Test orb_slam2_ros with down-facing stereo camera
       SIM_MODE:=hw7           Hardware build 7, which includes down-facing stereo camera -->
  <xacro:property name="SIM_MODE" value="$(arg SIM_MODE)"/>

  <orca_simulation_mode>${SIM_MODE}</orca_simulation_mode>

  <!-- Enable / disable Gazebo plugins -->
  <xacro:property name="BUOYANCY_PLUGIN" value="true"/>
  <xacro:property name="DRAG_PLUGIN" value="${SIM_MODE != 'slam_test'}"/>
  <xacro:property name="THRUSTER_PLUGIN" value="${SIM_MODE != 'slam_test'}"/>
  <xacro:property name="BAROMETER_PLUGIN" value="${SIM_MODE != 'slam_test'}"/>
  <xacro:property name="FORWARD_CAMERA_PLUGIN" value="${SIM_MODE != 'slam_test'}"/>
  <xacro:property name="STEREO_CAMERA_PLUGIN" value="${SIM_MODE == 'slam_test' or SIM_MODE == 'hw7'}"/>
  <xacro:property name="MOTION_PLUGIN" value="${SIM_MODE == 'slam_test'}"/>
  <xacro:property name="GROUND_TRUTH_PLUGIN" value="true"/>

  <!--
      Orca constants

      Flight dynamics are hugely driven by these 3 constants, all in the body frame:
          {x, y, THRUSTER_Z}: where forward/back/strafe/yaw thrust forces are applied
          {0, 0, MASS_Z}: where the linear and angular drag force is applied
          {0, 0, VOLUME_Z}: where the buoyancy force is applied

      Default simulation is fresh water and slightly positive buoyancy:
          TOTAL_VOLUME = 0.01
          FLUID_DENSITY = 997
          DISPLACED_MASS = TOTAL_VOLUME * FLUID_DENSITY = 9.97
          TOTAL_MASS = 9.9
   -->
  <xacro:property name="TOTAL_MASS" value="14.25"/>
  <xacro:property name="TOTAL_VOLUME" value="0.0144"/>
  <xacro:property name="LENGTH" value="0.550"/>
  <xacro:property name="WIDTH" value="0.364"/>
  <xacro:property name="HEIGHT" value="0.270"/>
  <!-- <xacro:property name="IXX" value="${TOTAL_MASS / 12 * (WIDTH * WIDTH + HEIGHT * HEIGHT)}"/>
  <xacro:property name="IYY" value="${TOTAL_MASS / 12 * (LENGTH * LENGTH + HEIGHT * HEIGHT)}"/>
  <xacro:property name="IZZ" value="${TOTAL_MASS / 12 * (LENGTH * LENGTH + WIDTH * WIDTH)}"/> -->
  <xacro:property name="IXX" value="0.15166"/>
  <xacro:property name="IYY" value="0.068878"/>
  <xacro:property name="IZZ" value="0.13818"/>
  <!-- <xacro:property name="FLOAT_X" value="0.12"/>
  <xacro:property name="FLOAT_Y" value="0.11"/>
  <xacro:property name="FLOAT_Z" value="0.07"/> -->
  <xacro:property name="THRUSTER_X" value="0.18"/> <!-- posição do thruster em relação ao baselink/centro de massa -->
  <xacro:property name="THRUSTER_Y" value="0.12"/> <!-- posição do thruster em relação ao baselink/centro de massa -->
  <xacro:property name="THRUSTER_Z" value="0.023"/> <!-- posição do thruster em relação ao baselink/centro de massa -->
  <xacro:property name="VERT_THRUSTER_Y" value="0.125"/> <!-- posição do thruster em relação ao baselink/centro de massa -->
  <xacro:property name="VERT_THRUSTER_Z" value="0.175"/> <!-- posição do thruster em relação ao baselink/centro de massa -->
  <xacro:property name="MASS_Z" value="0.076"/> <!-- fazer estudo de drag force -->
  <xacro:property name="VOLUME_Z" value="0.094"/> <!-- vol do bouyance/já está calculado? --> 
  <xacro:property name="FORWARD_FORCE" value="50"/> <!-- parametro do thruster escolhido/força no sentido positivo (N) --> 
  <xacro:property name="REVERSE_FORCE" value="40"/> <!-- parametro do thruster escolhido/força no sentido negativo (N) --> 
  <xacro:property name="HAS_TETHER" default="false"/> <!-- vamos considerar cabos? --> 
  <xacro:property name="SURFACE" default="0"/> <!-- manter o mesmo --> 
  <xacro:property name="STEREO_BASELINE" default="0.36"/> <!-- nao vamos utilizar -->

  <!-- Mesh file -->
  <xacro:property name="mesh_file" value="file://$(find orca_description)/meshes/base_link.STL"/>

  <!-- Physics properties -->
  <xacro:property name="FLUID_DENSITY" value="997"/>

  <!-- General constants -->
  <xacro:property name="PI" value="3.1415926535897931"/>

  <!-- Materials -->
  <material name="gray">
    <color rgba="0.5 0.5 0.5 1.0"/>
  </material>
  <material name="blue">
    <color rgba="0.5 0.5 1.0 1.0"/>
  </material>
  <material name="red">
    <color rgba="1.0 0.0 0.0 1.0"/>
  </material>

  <!-- Thruster origins -->
  <xacro:property name="front_right_origin">
    <origin xyz="${THRUSTER_X} ${-THRUSTER_Y} ${THRUSTER_Z}" rpy="0 ${PI/2} ${PI/4}"/>
  </xacro:property>
  <xacro:property name="front_left_origin">
    <origin xyz="${THRUSTER_X} ${THRUSTER_Y} ${THRUSTER_Z}" rpy="0 ${PI/2} ${-PI/4}"/>
  </xacro:property>
  <xacro:property name="rear_right_origin">
    <origin xyz="${-THRUSTER_X} ${-THRUSTER_Y} ${THRUSTER_Z}" rpy="0 ${PI/2} ${PI*3/4}"/>
  </xacro:property>
  <xacro:property name="rear_left_origin">
    <origin xyz="${-THRUSTER_X} ${THRUSTER_Y} ${THRUSTER_Z}" rpy="0 ${PI/2} ${-PI*3/4}"/>
  </xacro:property>
  <xacro:property name="vertical_right_origin">
    <origin xyz="0 ${-VERT_THRUSTER_Y} ${VERT_THRUSTER_Z}" rpy="0 0 0"/>
  </xacro:property>
  <xacro:property name="vertical_left_origin">
    <origin xyz="0 ${VERT_THRUSTER_Y} ${VERT_THRUSTER_Z}" rpy="0 0 0"/>
  </xacro:property>

  <!-- Thruster macro -->
  <xacro:macro name="t200" params="name *origin">
    <link name="t200_link_${name}">
      <!-- Front cone -->
      <visual>
        <origin xyz="0 0 0"/>
        <geometry>
          <sphere radius="0.02"/>
        </geometry>
        <material name="gray"/> <!-- All visual elements in this link pick up this material -->
      </visual>
      <!-- Rear cone -->
      <visual>
        <origin xyz="0 0 -0.07"/>
        <geometry>
          <sphere radius="0.02"/>
        </geometry>
      </visual>
      <!-- Thruster body -->
      <visual>
        <origin xyz="0 0 -0.035"/>
        <geometry>
          <cylinder length="0.07" radius="0.02"/>
        </geometry>
      </visual>
      <!-- Propeller guard -->
      <visual>
        <origin xyz="0 0 -0.0225"/>
        <geometry>
          <cylinder length="0.045" radius="0.045"/>
        </geometry>
      </visual>
    </link>
    <joint name="t200_joint_${name}" type="fixed">
      <xacro:insert_block name="origin"/>
      <parent link="base_link"/>
      <child link="t200_link_${name}"/>
    </joint>
  </xacro:macro>

  <!-- Base link -->
  <link name="base_link">
    <!-- Inertial -->
    <inertial>
      <origin xyz="0 0 ${MASS_Z}" rpy="0 0 0"/> <!-- Center of mass -->
      <mass value="${TOTAL_MASS}"/>
      <inertia ixx="${IXX}" ixy="0.0" ixz="0.0" iyy="${IYY}" iyz="0.0" izz="${IZZ}"/>
    </inertial>
    <visual>
      <origin
        xyz="0 0 0" rpy="0 0 1.57" />
      <geometry>
        <mesh
          filename="${mesh_file}" />
      </geometry>
      <material
        name="">
        <color
          rgba="0.49804 0.49804 0.49804 1" />
      </material>
    </visual>
    <collision>
      <origin
        xyz="0 0 0" rpy="0 0 1.57" />
      <geometry>
        <mesh
          filename="${mesh_file}" />
      </geometry>
    </collision>
  </link>

  <!-- Attach thrusters to the base_link -->
  <xacro:t200 name="front_right">
    <xacro:insert_block name="front_right_origin"/>
  </xacro:t200>
  <xacro:t200 name="front_left">
    <xacro:insert_block name="front_left_origin"/>
  </xacro:t200>
  <xacro:t200 name="rear_right">
    <xacro:insert_block name="rear_right_origin"/>
  </xacro:t200>
  <xacro:t200 name="rear_left">
    <xacro:insert_block name="rear_left_origin"/>
  </xacro:t200>
  <xacro:t200 name="vertical_right">
    <xacro:insert_block name="vertical_right_origin"/>
  </xacro:t200>
  <xacro:t200 name="vertical_left">
    <xacro:insert_block name="vertical_left_origin"/>
  </xacro:t200>

  <!-- The OrcaBuoyancyPlugin applies a force that counteracts gravity. Buoyancy force is not
       applied if the link is above the surface of the water. -->
  <xacro:if value="${BUOYANCY_PLUGIN}">
    <gazebo>
      <plugin name="OrcaBuoyancyPlugin" filename="libOrcaBuoyancyPlugin.so">
        <base_link>base_link</base_link>
        <center_of_volume>0 0 ${VOLUME_Z}</center_of_volume>
        <fluid_density>${FLUID_DENSITY}</fluid_density>
        <volume>${TOTAL_VOLUME}</volume>
      </plugin>
    </gazebo>
  </xacro:if>

  <!-- The OrcaDragPlugin applies a drag force proportional to velocity^2. -->
  <xacro:if value="${DRAG_PLUGIN}">
    <gazebo>
      <plugin name="OrcaDragPlugin" filename="libOrcaDragPlugin.so">
        <angular_drag>4 4 4</angular_drag>
        <base_link>base_link</base_link>
        <center_of_mass>0 0 ${MASS_Z}</center_of_mass>
      </plugin>
    </gazebo>
  </xacro:if>

  <!-- The OrcaThrusterPlugin turns ROS messages into thrust forces. Each message contains an array
       of thrust efforts [-1.0, 1.0]. The URDF to SDF translation nukes the joints, so joint locations
       must appear here. -->
  <xacro:if value="${THRUSTER_PLUGIN}">
    <gazebo>
      <plugin name="OrcaThrusterPlugin" filename="libOrcaThrusterPlugin.so">
        <base_link>base_link</base_link>
        <thruster
            name="front_right"> <!-- name attributes are ignored; the tag order must match the message array order -->
          <pos_force>${FORWARD_FORCE}
          </pos_force> <!-- units are N, positive for ccw, negative for cw -->
          <neg_force>${REVERSE_FORCE}
          </neg_force> <!-- units are N, positive for ccw, negative for cw -->
          <xacro:insert_block name="front_right_origin"/>
        </thruster>
        <thruster name="front_left">
          <pos_force>${FORWARD_FORCE}</pos_force>
          <neg_force>${REVERSE_FORCE}</neg_force>
          <xacro:insert_block name="front_left_origin"/>
        </thruster>
        <thruster name="rear_right">
          <pos_force>${-REVERSE_FORCE}</pos_force>
          <neg_force>${-FORWARD_FORCE}</neg_force>
          <xacro:insert_block name="rear_right_origin"/>
        </thruster>
        <thruster name="rear_left">
          <pos_force>${-REVERSE_FORCE}</pos_force>
          <neg_force>${-FORWARD_FORCE}</neg_force>
          <xacro:insert_block name="rear_left_origin"/>
        </thruster>
        <thruster name="vertical_right">
          <pos_force>${FORWARD_FORCE}</pos_force>
          <neg_force>${REVERSE_FORCE}</neg_force>
          <xacro:insert_block name="vertical_right_origin"/>
        </thruster>
        <thruster name="vertical_left">
          <pos_force>${-REVERSE_FORCE}</pos_force>
          <neg_force>${-FORWARD_FORCE}</neg_force>
          <xacro:insert_block name="vertical_left_origin"/>
        </thruster>
      </plugin>
    </gazebo>
  </xacro:if>

  <!-- Report ground truth -->
  <xacro:if value="${GROUND_TRUTH_PLUGIN}">
    <gazebo>
      <plugin name="p3d_test" filename="libgazebo_ros_p3d.so">
        <ros>
          <argument>odom:=gt_best_effort</argument>
        </ros>
        <update_rate>30.0</update_rate>
        <body_name>base_link</body_name>
        <frame_name>map</frame_name>
        <xyz_offsets>0 0 0</xyz_offsets>
        <rpy_offsets>0 0 0</rpy_offsets>
      </plugin>
    </gazebo>
  </xacro:if>

  <!-- A simple motion plugin for very simple simulations, turn off for normal simulations -->
  <xacro:if value="${MOTION_PLUGIN}">
    <gazebo>
      <plugin name="MotionPlugin" filename="libMotionPlugin.so">
        <link name="base_link">
          <period>20</period>
          <linear_vel>0.2 0.2 0.05</linear_vel>
          <angular_vel>0 0 0.2</angular_vel>
        </link>
      </plugin>
    </gazebo>
  </xacro:if>

</robot>
